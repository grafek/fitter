generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String
  email         String?   @unique
  emailVerified DateTime?
  image         String
  accounts      Account[]
  sessions      Session[]
  posts         Post[]
  likes         Like[]
  comments      Comment[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Post {
  id          String   @id @default(cuid())
  title       String
  description String
  sport       String
  workoutDate DateTime
  image       String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  creator   User   @relation(fields: [creatorId], references: [id])
  creatorId String

  likes    Like[]
  comments Comment[]
}

model Comment {
  id   String @id @default(cuid())
  text String

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String

  post   Post   @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId String

  parent   Comment?  @relation("CommentReplies", fields: [parentId], references: [id], onDelete: Cascade)
  children Comment[] @relation("CommentReplies")

  parentId String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  likes Like[]
}

model Like {
  id String @id @default(cuid())

  post   Post?   @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId String?

  user   User   @relation(fields: [userId], references: [id])
  userId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  comment   Comment? @relation(fields: [commentId], references: [id], onDelete: Cascade)
  commentId String?

  @@unique([userId, commentId])
  @@unique([userId, postId])
}
